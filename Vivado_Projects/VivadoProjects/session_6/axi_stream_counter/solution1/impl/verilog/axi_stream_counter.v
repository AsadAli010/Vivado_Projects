// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_stream_counter,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=35}" *)

module axi_stream_counter (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        counter_output_TDATA,
        counter_output_TVALID,
        counter_output_TREADY,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] counter_output_TDATA;
output   counter_output_TVALID;
input   counter_output_TREADY;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg counter_output_TVALID;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_18;
reg   [31:0] counterValue;
reg    counter_output_TDATA_blk_n;
wire   [31:0] counterValue_assign_fu_33_p2;
reg    ap_sig_ioackin_counter_output_TREADY;
reg    ap_reg_ioackin_counter_output_TREADY;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_62;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 counterValue = 32'b00000000000000000000000000000000;
#0 ap_reg_ioackin_counter_output_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_counter_output_TREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            if (~((ap_start == 1'b0) | (1'b0 == ap_sig_ioackin_counter_output_TREADY))) begin
                ap_reg_ioackin_counter_output_TREADY <= 1'b0;
            end else if (ap_sig_62) begin
                ap_reg_ioackin_counter_output_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (1'b0 == ap_sig_ioackin_counter_output_TREADY)))) begin
        counterValue <= counterValue_assign_fu_33_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (1'b0 == ap_sig_ioackin_counter_output_TREADY)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~((ap_start == 1'b0) | (1'b0 == ap_sig_ioackin_counter_output_TREADY)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_18) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_counter_output_TREADY)) begin
        ap_sig_ioackin_counter_output_TREADY = counter_output_TREADY;
    end else begin
        ap_sig_ioackin_counter_output_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        counter_output_TDATA_blk_n = counter_output_TREADY;
    end else begin
        counter_output_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (1'b0 == ap_reg_ioackin_counter_output_TREADY))) begin
        counter_output_TVALID = 1'b1;
    end else begin
        counter_output_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return = ap_const_lv32_0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_18 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_62 = (~(ap_start == 1'b0) & (1'b1 == counter_output_TREADY));
end

assign counterValue_assign_fu_33_p2 = (counterValue + ap_const_lv32_1);

assign counter_output_TDATA = (counterValue + ap_const_lv32_1);

endmodule //axi_stream_counter
